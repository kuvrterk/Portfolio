#include "student.h"
/*
Descrption: This is the contructer of the class that's getting the values and putting it in class
values, while checking the values and calling other functions for the checking
Input: string lastname, firstname, studentID, majorcode; double gpa, charges, and finanicalaid 
Ouput: None
*/
student::student(string laName, string firName, string studID, string studentMajorCode,
			double GPA, double charge, double finanicalAide)
{
	lastName = laName;
	firstName = firName;

	//first to check the ID
	bool ID = checkID(studID);
	if(ID)
	{
		studentID = studID;
	}
	else
	{
		cout << "Error, no vaild student ID" << endl;
		studentID = "";
	}

	//Checking the major
	major = expandMajorCode(studentMajorCode);
	if(major == "")
	{
		cout << "Error invaild major delcared" << endl;
	}

	//Chcecking GPA
	if(GPA >= 0.0 && GPA <= MAX_GPA)
	{
		gpa = GPA;
	}
	else
	{
		cout << "Error no GPA or invaild GPA, setting to 0" << endl;
		gpa = 0.0;
	}
	//Checking Charges
	if(charge >= 0.0 && charge <= MAX_CHARGES)
	{
		charges = charge;
	}
	else
	{
		cout << "Error no charges or invaild charges, setting to 0" << endl;
		charges = 0.0;
	}
	
	//Checking the FinAid
	if(finanicalAide >= 0.0 && finanicalAide <= charge)
	{
		financialAid = finanicalAide;
	}
	else
	{
		cout << "Error Finanical aid is invalid, setting to 0" << endl;
		financialAid = 0.0;
	}

	balance = charges - financialAid;
}
/*
Descrption: Checking to see if the ID meets the correct certia 
Input: string studentId
Output: bool
*/
bool student::checkID(string studentID) const
{
	bool ID;
	if(studentID.length() != 10)
	{
		ID = false;
	}
	else if(studentID[0] != 'L')
	{
		ID = false;
	}
	else
	{
		for(unsigned int i = 0; i < studentID.length(); i++)
		{
			if(isalnum(studentID[i]))
			{
				ID = true;		
			}
			else
			{
				ID = false;
				break;
			}
		}
	}

	return ID;
}
/*
Descrption: Error checking the major and choosing the right one
Input: String major code
Output: string code
*/
string student::expandMajorCode(string studentMajor) const
{
	static const string mCodes[] = 
	{
		"AAD - Architecture Design", 
		"AAE - Architecture", 
		"AAI - Interior Design", 
		"AAL - Landscape Architecture", 
		"AAP - Urban Planning", 
		"AAS - Afro-American Studies", 
		"ABS - Architecture Building Science", 
		"ACA - Architecture Construction Mgmt", 
		"ACC - Accounting", 
		"AES - Aerospace Studies", 
		"AHP - Allied Health", 
		"AIS - Asian Studies", 
		"ANT - Anthropology", 
		"ANTH - Anthropology", 
		"ARA - Arabic", 
		"ART - Art", 
		"AST - Astronomy", 
		"ATE - Athletic Training", 
		"BGES - Business Global Entrepeneurial", 
		"BIO - Biological Sciences", 
		"BLW - Business Law", 
		"BUS - Business Administration", 
		"CED - Counselor Education", 
		"CEE - Civil Engineering", 
		"CEG - Civil Engineering", 
		"CEM - Construction Management", 
		"CEP - Counseling & Educ Psych", 
		"CFA - College of Fine Arts", 
		"CHE - Chemistry", 
		"CHI - Chinese", 
		"CIE - Curric & Instruct: Elementary", 
		"CIG - Curric & Instruct: General", 
		"CIL - Curric & Instruct: Literacy", 
		"CIM - Curric & Instruct: Media", 
		"CIR - Curric & Instruct: Read", 
		"CIS - Curric & Instruct: Secondary", 
		"CIT - Curric & Instruct: Technology", 
		"CITR - Curric & Instruct: Tech RPDP", 
		"CLA - Classical Studies", 
		"CLS - Clinical Laboratory Science", 
		"CMI - Comprehensive Medical Imaging", 
		"CNS - Consciousness Studies", 
		"COE - College of Education", 
		"COL - Comparative Literature", 
		"COLA - College of Liberal Arts", 
		"COM - Communication Studies", 
		"COS - Communication Studies", 
		"COU - Counseling", 
		"CPE - Computer Engineering", 
		"CPS - Counseling", 
		"CRJ - Criminal Justice", 
		"CS - Computer Science", 
		"CSC - Computer Science", 
		"CST - Cultural Studies", 
		"DAN - Dance", 
		"DEN - Dentistry", 
		"DES - Design", 
		"DMS - Diagnostic Medial Sonography", 
		"DPT - Physical Therapy", 
		"EAB - Bio Methods", 
		"ECD - Educ Career & Personal Devel", 
		"ECE - Early Childhood", 
		"ECEM - Emergency Management", 
		"ECG - Electrical And Computer Engine", 
		"ECH - Early Childhood", 
		"ECO - Economics", 
		"ECON - Economics", 
		"EDA - Educational Administration", 
		"EDCT - Career Education", 
		"EDEL - Education: Elementary", 
		"EDH - Educational Leadership Phd", 
		"EDMS - Education: Middle School", 
		"EDRL - Education: Reading & Language", 
		"EDSC - Education: Secondary", 
		"EDSP - Special Education", 
		"EDU - Education", 
		"EDUC - Education: Upper Division", 
		"EDW - Workforce Education", 
		"EDWF - Workforce Education", 
		"EE - Electrical And Computer Engine", 
		"EED - Entertainment Engineering", 
		"EEG - Electrical Engineering", 
		"EGG - Engineering", 
		"EMBA - Executive Masters", 
		"ENG - English", 
		"ENGL - English", 
		"ENS - Environmental Science", 
		"ENV - Environmental Studies", 
		"EOH - Env/Occ Health", 
		"EPC - Educational Psychology", 
		"EPP - Educational Psychology", 
		"EPS - Ethics And Policy Studies", 
		"EPY - Educational Psychology", 
		"ESE - Secondary Education", 
		"ESL - English As A Second Language", 
		"ESP - Special Education", 
		"ESR - Secondary Education Reading", 
		"ETS - Ethnic Studies", 
		"EXL - Excell Pgrm", 
		"FAB - Food & Beverage", 
		"FIN - Finance", 
		"FIS - Film", 
		"FOL - Foreign Language", 
		"FRE - French", 
		"FREN - French", 
		"GAM - Gaming Management", 
		"GEOG - Geography", 
		"GEOL - Geology", 
		"GER - German", 
		"GRA - Graduate College", 
		"GRE - Greek", 
		"GSC - General Studies Communication", 
		"GWK - Great Works Certificate", 
		"HCA - Health Care Administration", 
		"HEB - Hebrew", 
		"HED - Health Education", 
		"HIS - History", 
		"HIST - History", 
		"HMD - Hotel Management", 
		"HOA - Hotel Administration", 
		"HON - Honors", 
		"HPS - Health Physics", 
		"HSC - Health Science", 
		"IB - International Business", 
		"ICE - Curric & Instruct: Elementary", 
		"ICG - Curric & Instruct: Genereral", 
		"ICS - Instruction & Curricular Stud", 
		"IDS - Interdisciplinary Studies", 
		"INF - Informatics", 
		"IPG - International Programs", 
		"IS - Management Information Systems", 
		"ITA - Italian", 
		"ITAL - Italian", 
		"JAP - Japanese", 
		"JMS - Journalism & Media Studies", 
		"JOUR - Journalism & Media Studies", 
		"JPN - Japanese", 
		"KIN - Kinesiology", 
		"LAND - Landscape Architecture", 
		"LAS - Latin American Studies", 
		"LAT - Latin", 
		"LAW - Law", 
		"LBS - Liberal Studies", 
		"LIB - Library Science", 
		"LIN - Linguistics", 
		"MAT - Mathematics", 
		"MATH - Mathematics", 
		"MBA - Master Business Administration", 
		"ME - Mechanical Engineering", 
		"MEG - Mechanical Engineering", 
		"MFT - Marriage & Family Therapy", 
		"MGT - Management", 
		"MIL - Military Science", 
		"MIS - Management Information Systems", 
		"MKT - Marketing", 
		"MSC - Military Science", 
		"MSFS - Multidisc: Forensic Science", 
		"MUS - Music", 
		"MUSA - Music", 
		"MUSC - Music", 
		"MUSE - Music", 
		"NRES - Environmental Studies", 
		"NSE - National Student Exchange", 
		"NTR - Nutrition Sciences", 
		"NUC - Nuclear Medicine", 
		"NUE - Nuclear Engineering", 
		"NUR - Nursing", 
		"NURS - Nursing", 
		"NUTR - Nutrition Sciences", 
		"ORTH - Orthodontics", 
		"PAF - Public Affairs", 
		"PBH - Public Health", 
		"PED - Physical Education", 
		"PEDO - Pediatric Dentistry", 
		"PER - Persian", 
		"PEX - Physical Education: Activity", 
		"PGDE - Postgraduate Dental Education", 
		"PGM - PGA Golf Management", 
		"PHI - Philosophy", 
		"PHIL - Philosophy", 
		"PHS - Physical Sciences", 
		"PHT - Physical Therapy", 
		"PHY - Physics", 
		"PHYS - Physics", 
		"PORT - Portuguese", 
		"POS - Political Science", 
		"PSY - Psychology", 
		"PTG - Portuguese", 
		"PTS - Physical Therapy Science", 
		"PUA - Public Administration", 
		"RAD - Radiologic Technology", 
		"RDCH - Radiochemistry", 
		"RE - Real Estate", 
		"REC - Recreation",
		"REG - Religious Studies", 
		"RLS - Recreation & Sport Management", 
		"RPDP - Reg Professional Development", 
		"RSC - Radiological Sciences", 
		"RUS - Russian", 
		"SCI - Science", 
		"SCM - Supply Chain", 
		"SIM - Sports Injury Management", 
		"SLS - Sport & Leisure Studies", 
		"SOC - Sociology", 
		"SPA - Spanish", 
		"SPAN - Spanish", 
		"STA - Statistics", 
		"STAT - Statistics", 
		"SW - Social Work", 
		"SWK - Social Work", 
		"TCA - Tourism", 
		"TESL - English as a Second Language", 
		"THA - Theatre Arts", 
		"THTR - Theatre Arts", 
		"TRCR - Transferred Elective Credit",
		"ULD - Urban Leadership", 
		"UNS - University Studies", 
		"WDL - Workforce Development", 
		"WMST - Women's Studies", 
		"WOM - Women's Studies",
		"WRM - Water Resources Management",
		"UND - Undeclared" 
	};
	
	//AAD - Ar
	for(int i = 0; i < 222; i++)
	{
		string temp = mCodes[i];	
		unsigned int index = 0;
		while(!(isspace(temp[index])))
		{
			
			if(temp[index] == studentMajor[index])
			{
				index++;
				if(studentMajor.length() == index)
				{
					return temp;
				}
			}
			else
			{
				break;
			}	
		}
		temp.clear();
	}

	string error = "";
	return error;
}
//Getter functions
/*
Descrption: getting the lastname
Input: None
Output: string lastname
*/
string student::getLastName() const
{
	return lastName;
}
/*
Descrption: getting the firstname
Input: None
Output: string firstname
*/
string student::getFirstName() const
{
	return firstName;
}
/*
Descrption: getting studentID
Input: None
Output: string studentID
*/
string student::getID() const
{
	return studentID;
}/*
Descrption: getting the student charge and fin aid
Input: double charge and double finAid
Output: None
*/
void student::getCharges(double& studentCharges, double& finAid) const
{
	studentCharges = charges; 
	finAid = financialAid;
}
/*
Descrption: Getting the balance
Input: none
Output: double balance
*/
double student::getBalance() const
{
	return balance;
}	
/*
Descrption: Getting the major
Input: None
Output: string major
*/
string student::getMajor() const
{
	return major;
}
/*
Descrption: Getting the GPA
Input: None
Output: double gpa
*/
double student::getGPA() const
{
	return gpa;
}
//Setter functions
/*
Descrption: Setting the values
Input: string last and first name
Output: None
*/ 
void student::setName(string lasName, string firName)
{
	lastName = lasName;
	firstName = firName;
}
/*
Descrption: Error checking and setting the studentId
Input: string student ID
Output: None
*/
void student::setID(string studID)
{
	bool ID = checkID(studID);
	if(ID)
	{
		studentID = studID;
	}
	else
	{
		cout << "Error, no vaild student ID" << endl;
		studentID = "";
	}
}
/*
Descrption: Calling the error checking function
Input: string student major
Output: None
*/
void student::setMajor(string studentMajor)
{
	//If there is a no major that's legal then it would print out an empty string
	major = expandMajorCode(studentMajor);
}
/*
Descrption: Error checking for GPA
Input: double gpa
Output: None
*/
void student::setGPA(double GPA)
{
	if(GPA >= 0.0 && GPA <= MAX_GPA)
	{
		gpa = GPA;
	}
	else
	{
		cout << "Error no GPA or invaild GPA, setting to 0" << endl;
		gpa = 0.0;
	}
}
/*
Descrption: Error checking for student charges and finaid while getting the balanace
Input: double student charges and fin aid
Output: None
*/
void student::setCharges(double studentCharges, double finAid)
{
	if(studentCharges >= 0.0 && studentCharges <= MAX_CHARGES)
	{
		charges = studentCharges;
	}
	else
	{
		cout << "Error no charges or invaild charges, setting to 0" << endl;
		charges = 0.0;
	}
	
	//Checking the FinAid
	if(finAid >= 0.0 && finAid <= studentCharges)
	{
		financialAid = finAid;
	}
	else
	{
		cout << "Error Finanical aid is invalid, setting to 0" << endl;
		financialAid = 0.0;
	}
}

/*Showing student
Descrption: Printing out the results
Input: None 
Output: None
*/
void student::showStudent() const
{
	string bars;
	bars.append(70, '-');
	cout << bars << endl;
	
	cout << setprecision(2) << fixed;
	cout << "Student Summary" << endl;
	cout << right << setw(14) << "Name: " << lastName << ", " << firstName <<  endl;
	cout << right << setw(14) << "ID: " << studentID << endl;
	cout << right << setw(14) << "Major: " << major << endl;
	cout << right << setw(14) << "GPA: " << setw(7) << gpa << endl;
	cout << right << setw(14) << "Charges: " << setw(7) << charges << 
		right << setw(30) << "Financial Aid: " << setw(4) << financialAid << endl;
	cout << right << setw(14) << "Balance: " << setw(7) << balance << endl;
}
