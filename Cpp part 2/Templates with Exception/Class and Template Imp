//statisticsPkg

#include <iostream>
#include <cmath>
#include <cctype>
#include <iomanip>

using namespace std;

template <class myType>
class statisticsPkg
{
     public:
	statisticsPkg();			
	int getSetLength() const;		
	statisticsPkg(int, myType []);		
	~statisticsPkg();			
	myType getDatum(int) const;		
	void setDatum(int, myType);		
	int readCount();			
	void generateNewSet(int);		
	void printSet() const;			
	myType minimum() const;			
	myType maximum() const;			
	myType median() const;			
	myType sum() const;			
	myType average() const;			
	myType standardDeviation() const;
	void shellSort();			
	myType coVariance(const statisticsPkg&) const;
	myType pearsonsCoefficient(const statisticsPkg&) const;
	myType linearCorrelationCoefficient(const statisticsPkg&) const;
     private:
	void freeMemory();			
	int setLength;	
	myType *mySet;
	static const int CNT_MIN = 5;
	static const int CNT_MAX = 9999;
	static const int RND_LIMIT = 999;
};


//The Templates part of the .h file
//Constructos and Destructors

template <typename myType>
statisticsPkg<myType>::statisticsPkg()
{
	setLength = 0;
	mySet = nullptr;
}

template <class myType>
statisticsPkg<myType>::statisticsPkg(int size, myType arrayOfValues[])
{
	if(size >= CNT_MIN && size <= CNT_MAX)
	{
		if(arrayOfValues != nullptr)
			setLength = size;
		else
		{
			cout << "Error, (Constructor 2) the size is out of bounds" << endl;
			setLength = 0;
			mySet = nullptr;
		}
	}
	else
	{
		cout << "Error, (Constructor 2) the size is out of bounds" << endl;
		setLength = 0;
		mySet = nullptr;
	}
	
	//Create a new array and copy it from the past in array
	mySet = new myType[setLength];

	for(int i = 0; i < setLength; i++)
	{
		mySet[i] = arrayOfValues[i];
	}
}

template <class myType>
statisticsPkg<myType>::~statisticsPkg()
{
	freeMemory();
	mySet = nullptr;
	setLength = 0;
}

template <class myType>
void statisticsPkg<myType>::freeMemory()
{
	delete[] mySet;
}

//Shell Sort
template <class myType>
void statisticsPkg<myType>::shellSort()
{
	//Sorting the numbers in the array
	int i, j;
	int h = 1;
	while((h * 3 + 1 < setLength))
	{
		h = 3 * h + 1;
	}

	while(h > 0)
	{
		for(i = h - 1; i < setLength; i++)
		{
			myType temp = mySet[i];
			for(j = i; (j >= h) && (mySet[j - h] > temp); j = j - h)
			{
				mySet[j] = mySet[j - h];
			}
			mySet[j] = temp;
		}
		h = h / 3;
	}
}

//Getter/Setter Functions
template <class myType>
int statisticsPkg<myType>::getSetLength() const
{
	return setLength;
}


//myType functions
template <class myType>
myType statisticsPkg<myType>::getDatum(int indexLocation) const
{
	//If i get an error with getDatum with coVar, etc,
	//Then that means it's wrong and need to send the index of it
	myType indexValue;
	
	if(indexLocation >= 0)
	{	
		for(int i = 0; i < setLength; i++)
		{
			if(indexLocation == i)
			{
				indexValue = mySet[i];
			}
		}
	}
	else
	{
		cout << "Error, (getDatum) the index is out of range!" << endl;
	}
	
	return indexValue;
}

template <class myType>
void statisticsPkg<myType>::setDatum(int indexLocation, myType value)
{	
	if(indexLocation >= 0)
	{	
		for(int i = 0; i < setLength; i++)
		{
			if(indexLocation == i)
			{
				mySet[i] = value;
			}
		}
	}
	else
	{
		cout << "Error, (setDatum) the index is out of range!" << endl;
	}
}

//Functions for getting the max/min/med/sum/average/dev (math)
template <class myType>
myType statisticsPkg<myType>::maximum() const
{
	myType maxValue = mySet[0];
	
	for(int i = 1; i < setLength; i++)
	{
		if(maxValue < mySet[i])
			maxValue = mySet[i];
	}
	
	return maxValue;
}

template <class myType>
myType statisticsPkg<myType>::minimum() const
{
	myType minValue = mySet[0];

	for(int i = 1; i < setLength; i++)
	{
		if(minValue > mySet[i])
		{
			minValue = mySet[i];
		}
	}

	return minValue;
}

template <class myType>
myType statisticsPkg<myType>::median() const
{
	myType medianValue = 0;

	if(setLength % 2 == 1)
	{
		for(int i = 0; i < setLength; i++)
		{
			if(i == (setLength / 2))
				medianValue = mySet[i];
		}
	}
	
	if(setLength % 2 == 0)
	{
		for(int i = 0; i < setLength; i++)
		{
			if(i == (setLength / 2))
			{
				medianValue = (mySet[i] + mySet[i - 1]) / 2;
			}
		}
	}

	return medianValue;
}

template <class myType>
myType statisticsPkg<myType>::sum() const
{
	myType sumValue = 0;

	for(int i = 0; i < setLength; i++)
	{
		sumValue += mySet[i];
	}

	return sumValue;
}

template <class myType>
myType statisticsPkg<myType>::average() const
{
	myType averageValue = 0;

	for(int i = 0; i < setLength; i++)
	{
		averageValue += mySet[i];
	}

	averageValue = averageValue / setLength;

	return averageValue;
}

template <class myType>
myType statisticsPkg<myType>::standardDeviation() const
{
	myType sum = 0, meanValue, sumDeviationValue = 0;

	for(int i = 0; i < setLength; i++)
	{
		sum += mySet[i];
	}
	
	meanValue = sum / setLength;

	for(int i = 0; i < setLength; i++)
	{
		sumDeviationValue += pow(mySet[i] - meanValue, 2);
	}

	return sqrt(sumDeviationValue / setLength);
}

//Other myType Fucntions
template <class myType>
int statisticsPkg<myType>::readCount()
{
	//The user would input the number of values
	//should check for expecations using try/catch if it's a number or not
	//Three trys is enough, but the four error and returns 0
	int expectionCounter = 0;
	int number;
	try
	{	
		cout << "Please enter a value between 5 and 9999" << endl; 
		cin >> number;
		if(isalnum(number))
		{
			cout << "Error, the value isn't a number!" << endl;
			throw number;
		}
		else if(number < CNT_MIN || number > CNT_MAX)
		{
			cout << "Error, the value: " << number << " is out of bounds!" << endl;
			throw number;
		}
		else
			return number;	
	}
	catch(int number)
	{
		expectionCounter++;
		cout << "Please try again you have " << expectionCounter << "/3 remaining" << endl;
	}

	try
	{
		cout << "Please enter a value between 5 and 9999" << endl; 
		cin >> number;
		if(isalnum(number))
		{
			cout << "Error, the value isn't a number!" << endl;
			throw number;
		}
		else if(number < CNT_MIN || number > CNT_MAX)
		{
			cout << "Error, the value: " << number << " is out of bounds!" << endl;
			throw number;
		}
		else
			return number;	
	}
	catch(...)
	{
		expectionCounter++;
		cout << "Please try again you have " << expectionCounter << "/3 remaining" << endl;
	}

	try
	{
		cout << "Please enter a value between 5 and 9999" << endl; 
		cin >> number;
		if(isalnum(number))
		{
			cout << "Error, the value isn't a number!" << endl;
			throw number;
		}
		else if(number < CNT_MIN || number > CNT_MAX)
		{
			cout << "Error, the value: " << number << " is out of bounds!" << endl;
			throw number;
		}
		else
			return number;	
	}
	catch(...)
	{
		expectionCounter++;
		cout << "Please try again you have " << expectionCounter << "/3 remaining" << endl;
	}
	
	try
	{
		cout << "Please enter a value between 5 and 9999" << endl; 
		cin >> number;
		if(!(isalnum(number)))
		{
			cout << "Error, the value isn't a number!" << endl;
			throw number;
		}
		else if(number < CNT_MIN || number > CNT_MAX)
		{
			cout << "Error, the value: " << number << " is out of bounds!" << endl;
			throw number;
		}
		else
			return number;	
	}
	catch(...)
	{
		cout << "Program is now ending please try again next time" << endl;
		exit(1);
	}

	return number;
}

template <class myType>
void statisticsPkg<myType>::generateNewSet(int newSetLength)
{
	//Call freememory function to free up the memory
	//the new length needs to be veriferedt
	//Then generated new numbers between 0 and rand max - 1

	if(newSetLength >= CNT_MIN && newSetLength <= CNT_MAX)
	{
		freeMemory();
		mySet = nullptr;
		mySet = new myType[newSetLength];
		
		setLength = newSetLength;
		for(int i = 0; i < setLength; i++)
		{
			mySet[i] = static_cast<myType>(rand() % RND_LIMIT - 1);
		}
	}
	else
	{
		cout << "Error, (geneNewSet) the number is out of bounds" << endl;
	}
}

template <class myType>
void statisticsPkg<myType>::printSet() const
{
	int counter = 0;
	for(int i = 0; i < setLength; i++)
	{
		cout << "mySet[" << i << "]  = " << mySet[i] << "     "; 
		counter++;
		if(counter == 3)
		{
			cout << endl;
			counter = 0;
		}
	}
}

template <class myType>
myType statisticsPkg<myType>::coVariance(const statisticsPkg<myType>& spkg) const
{
	//The stat in the function name is the first object passing thru
	//The object in the parameter name is the second object passing thru
	
	myType sum = 0;

	if(setLength != spkg.getSetLength())
	{
		cout << "Error, (coVariance) the is not the same length" << endl;
		return sum;
	}
	else
	{	
		for(int i = 0; i < setLength; i++)
		{
			sum += (getDatum(i) - average()) * (spkg.getDatum(i) - spkg.average()); 
		}	
		return sum / (setLength - 1);	
	}	
}

template <class myType>
myType statisticsPkg<myType>::pearsonsCoefficient(const statisticsPkg<myType>& spkg) const
{
	myType sum = 0;
	if(setLength != spkg.getSetLength())
	{
		cout << "Error, (pearsonsCoefficient) the is not the same length" << endl;
		return sum;
	}
	
	for(int i = 0; i < setLength; i++)
	{
		sum += (getDatum(i) * spkg.getDatum(i) - (setLength * (average() * spkg.average())));
	}

	sum = sum / ( (setLength - 1) * ( standardDeviation() * spkg.standardDeviation()));

	return sum;
}

template <class myType>
myType statisticsPkg<myType>::linearCorrelationCoefficient(const statisticsPkg<myType>& spkg) const
{	
	myType sum = 0;
	
	if(setLength != spkg.getSetLength())
	{
		cout << "Error, (linearCorrCoeff) the is not the same length" << endl;
		return sum;
	}

	sum += (coVariance(spkg) / ( standardDeviation() * spkg.standardDeviation()));

	return sum;
}
